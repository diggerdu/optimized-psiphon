#!/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'moonshawdo@gamil.com'
"""
验证哪些IP可以用于cdn加速中
主要是检查这个ip是否可以连通，并且证书是否为akamai.com
"""
#######################################
本脚本完全改自check google ip，感谢原作者
#######################################
import os
import sys
import threading
import socket
import ssl
import re
import select
import traceback
import logging
import random
from operator import itemgetter
import shutil

PY3 = False
if sys.version_info[0] == 3:
    from queue import Queue, Empty
    PY3 = True
    try:
        from functools import reduce
    finally:
        pass
    try:
        xrange
    except NameError:
        xrange = range
else:
    from Queue import Queue, Empty
import time
from time import sleep
 
g_useOpenSSL = 1
g_usegevent = 1
if g_usegevent == 1:
    try:
        from gevent import monkey
        monkey.patch_all()
        g_useOpenSSL = 0
        from gevent import sleep
    except ImportError:
        g_usegevent = 0

if g_useOpenSSL == 1:
    try:
        import OpenSSL.SSL

        SSLError = OpenSSL.SSL.WantReadError
        g_usegevent = 0
    except ImportError:
        g_useOpenSSL = 0
        SSLError = ssl.SSLError
else:
    SSLError = ssl.SSLError
    

#最大IP延时，单位毫秒
g_maxhandletimeout = 1500
#最大可用IP数量
g_maxhandleipcnt = 50
#检查IP的线程数
g_maxthreads = 60
#是否立即检查上一次的google ip列表
g_checklastgoogleipfirst = 1
#结束时是否需要对ip_tmpok.txt里面的结果进行排序
g_needsorttmpokfile = 1

"连接超时设置"
g_conntimeout = 5
g_handshaketimeout = 7

g_filedir = os.path.dirname(__file__)
g_cacertfile = os.path.join(g_filedir, "cacert.pem")
g_ipfile = os.path.join(g_filedir, "ip.txt")
g_tmpnofile = os.path.join(g_filedir, "ip_tmpno.txt")
g_tmpokfile = os.path.join(g_filedir, "ip_tmpok.txt")
g_tmperrorfile = os.path.join(g_filedir, "ip_tmperror.txt")
g_googleipfile = os.path.join(g_filedir,"googleip.txt")


# gevent socket cnt must less than 1024
if g_usegevent == 1 and g_maxthreads > 1000:
    g_maxthreads = 128

g_ssldomain = 'a';
g_excludessdomain=()
#检查组织是否为google，如果有其他名称，需要添加，暂时只发现一个
g_organizationName = ("Akamai Technologies Inc",)
g_blackiplist = ("216.",)


"是否自动删除记录查询成功的非google的IP文件，方便下次跳过连接，0为不删除，1为删除"
"文件名：ip_tmpno.txt，格式：ig_ssldomainp 连接与握手时间 ssl域名"
g_autodeltmpnofile = 0
"是否自动删除记录查询失败的IP文件，0为不删除，1为删除"
"ip_tmperror.txt，格式：ip"
g_autodeltmperrorfile = 0
    
if g_usegevent == 1:
    # Re-add sslwrap to Python 2.7.9
    import inspect
    __ssl__ = __import__('ssl')
    
    try:
        _ssl = __ssl__._ssl
    except AttributeError:
        _ssl = __ssl__._ssl2
        
    def new_sslwrap(sock, server_side=False, keyfile=None, certfile=None, cert_reqs=__ssl__.CERT_NONE, ssl_version=__ssl__.PROTOCOL_SSLv23, ca_certs=None, ciphers=None):
        context = __ssl__.SSLContext(ssl_version)
        context.verify_mode = cert_reqs or __ssl__.CERT_NONE
        if ca_certs:
            context.load_verify_locations(ca_certs)
        if certfile:
            context.load_cert_chain(certfile, keyfile)
        if ciphers:
            context.set_ciphers(ciphers)
            
        caller_self = inspect.currentframe().f_back.f_locals['self']
        return context._wrap_socket(sock, server_side=server_side, ssl_sock=caller_self)
    
    if not hasattr(_ssl, 'sslwrap'):
        _ssl.sslwrap = new_sslwrap


"""
ip_str_list为需要查找的IP地址，第一组的格式：
1.xxx.xxx.xxx.xxx-xx.xxx.xxx.xxx
2.xxx.xxx.xxx.xxx/xx
3.xxx.xxx.xxx.
4 xxx.xxx.xxx.xxx
5 xxx.xxx.xxx.xxx-xxx

组与组之间可以用换行相隔开,第一行中IP段可以用'|'或','
获取随机IP是每组依次获取随机个数量的，因此一组的IP数越少，越有机会会检查，当然获取随机IP会先排除上次查询失败的IP
"""
ip_str_list = '''
113.252.0.0-113.255.255.255
118.140.0.0-118.143.255.255
218.188.0.0-218.191.255.255
218.252.0.0-218.255.255.255
219.76.0.0-219.79.255.255
221.124.0.0-221.127.255.255
223.16.0.0-223.19.255.255
112.118.0.0-112.120.255.255
1.64.0.0-1.65.255.255
14.198.0.0-14.199.255.255
42.2.0.0-42.3.255.255
49.130.0.0-49.131.255.255
58.152.0.0-58.153.255.255
58.176.0.0-58.177.255.255
59.148.0.0-59.149.255.255
61.92.0.0-61.93.255.255
61.238.0.0-61.239.255.255
116.48.0.0-116.49.255.255
119.236.0.0-119.237.255.255
119.246.0.0-119.247.255.255
121.202.0.0-121.203.255.255
123.202.0.0-123.203.255.255
182.152.0.0-182.153.255.255
183.178.0.0-183.179.255.255
210.176.0.0-210.177.255.255
218.102.0.0-218.103.255.255
222.166.0.0-222.167.255.255
223.118.0.0-223.119.255.255
152.103.0.0-152.104.127.255
210.5.160.0-210.6.255.255
202.84.128.0-202.85.207.255
202.81.224.0-202.83.15.255
1.36.0.0-1.36.255.255
14.136.0.0-14.136.255.255
42.98.0.0-42.98.255.255
42.200.0.0-42.200.255.255
59.188.0.0-59.188.255.255
61.10.0.0-61.10.255.255
61.15.0.0-61.15.255.255
61.18.0.0-61.18.255.255
61.244.0.0-61.244.255.255
110.79.0.0-110.79.255.255
113.28.0.0-113.28.255.255
119.9.0.0-119.9.255.255
124.244.0.0-124.244.255.255
125.59.0.0-125.59.255.255
131.129.0.0-131.129.255.255
134.159.0.0-134.159.255.255
137.74.0.0-137.74.255.255
137.189.0.0-137.189.255.255
143.89.0.0-143.89.255.255
144.214.0.0-144.214.255.255
147.8.0.0-147.8.255.255
152.101.0.0-152.101.255.255
158.132.0.0-158.132.255.255
158.182.0.0-158.182.255.255
165.202.0.0-165.202.255.255
168.70.0.0-168.70.255.255
168.106.0.0-168.106.255.255
175.159.0.0-175.159.255.255
180.219.0.0-180.219.255.255
203.60.0.0-203.60.255.255
203.85.0.0-203.85.255.255
203.186.0.0-203.186.255.255
203.198.0.0-203.198.255.255
203.218.0.0-203.218.255.255
210.3.0.0-210.3.255.255
210.184.0.0-210.184.255.255
218.213.0.0-218.213.255.255
218.250.0.0-218.250.255.255
220.241.0.0-220.241.255.255
220.246.0.0-220.246.255.255
223.197.0.0-223.197.255.255
210.57.0.0-210.57.207.255
202.67.128.0-202.68.63.255
203.184.128.0-203.185.63.255
202.65.248.0-202.66.159.255
14.0.128.0-14.0.255.255
39.109.0.0-39.109.127.255
58.64.128.0-58.64.255.255
101.78.128.0-101.78.255.255
113.10.128.0-113.10.255.255
115.126.0.0-115.126.127.255
123.1.128.0-123.1.255.255
125.215.128.0-125.215.255.255
125.253.128.0-125.253.255.255
182.16.0.0-182.16.127.255
202.76.0.0-202.76.127.255
202.130.64.0-202.130.191.255
202.181.128.0-202.181.255.255
203.168.128.0-203.168.255.255
203.169.128.0-203.169.255.255
203.193.0.0-203.193.127.255
203.194.128.0-203.194.255.255
210.0.128.0-210.0.255.255
210.245.128.0-210.245.255.255
219.73.0.0-219.73.127.255
202.77.140.0-202.78.7.255
202.71.192.0-202.72.31.255
27.126.176.0-27.126.255.255
182.239.48.0-182.239.127.255
202.45.176.0-202.45.255.255
203.80.176.0-203.80.255.255
180.188.128.0-180.188.203.255
202.134.60.0-202.134.127.255
203.83.252.0-203.84.63.255
1.32.192.0-1.32.255.255
58.82.192.0-58.82.255.255
59.152.192.0-59.152.255.255
61.4.0.0-61.4.63.255
113.212.192.0-113.212.255.255
115.160.128.0-115.160.191.255
118.99.0.0-118.99.63.255
120.88.192.0-120.88.255.255
123.255.64.0-123.255.127.255
124.217.128.0-124.217.191.255
124.248.192.0-124.248.255.255
125.214.192.0-125.214.255.255
175.45.0.0-175.45.63.255
202.45.32.0-202.45.95.255
202.55.0.0-202.55.63.255
202.66.192.0-202.66.255.255
202.77.0.0-202.77.63.255
202.79.64.0-202.79.127.255
202.125.192.0-202.125.255.255
202.126.128.0-202.126.191.255
202.140.64.0-202.140.127.255
202.155.192.0-202.155.255.255
203.80.64.0-203.80.127.255
203.83.64.0-203.83.127.255
203.86.128.0-203.86.191.255
203.98.128.0-203.98.191.255
203.105.0.0-203.105.63.255
203.176.192.0-203.176.255.255
203.188.64.0-203.188.127.255
203.223.192.0-203.223.255.255
210.209.64.0-210.209.127.255
223.255.128.0-223.255.191.255
27.111.160.0-27.111.207.255
124.108.64.0-124.108.111.255
202.161.128.0-202.161.175.255
202.153.88.0-202.153.127.255
203.142.88.0-203.142.127.255
202.79.252.0-202.80.31.255
24.230.0.0-24.230.31.255
27.123.32.0-27.123.63.255
58.96.160.0-58.96.191.255
110.4.0.0-110.4.31.255
112.121.160.0-112.121.191.255
112.213.96.0-112.213.127.255
113.21.192.0-113.21.223.255
113.208.64.0-113.208.95.255
116.251.224.0-116.251.255.255
117.18.96.0-117.18.127.255
121.127.224.0-121.127.255.255
124.158.192.0-124.158.223.255
175.176.224.0-175.176.255.255
180.131.160.0-180.131.191.255
180.150.128.0-180.150.159.255
180.178.32.0-180.178.63.255
180.233.160.0-180.233.191.255
183.91.32.0-183.91.63.255
183.177.64.0-183.177.95.255
202.4.192.0-202.4.223.255
202.40.192.0-202.40.223.255
202.43.192.0-202.43.223.255
202.47.192.0-202.47.223.255
202.51.128.0-202.51.159.255
202.52.192.0-202.52.223.255
202.60.224.0-202.60.255.255
202.62.192.0-202.62.223.255
202.63.0.0-202.63.31.255
202.63.128.0-202.63.159.255
202.65.192.0-202.65.223.255
202.69.64.0-202.69.95.255
202.74.96.0-202.74.127.255
202.75.64.0-202.75.95.255
202.83.192.0-202.83.223.255
202.86.64.0-202.86.95.255
202.88.0.0-202.88.31.255
202.88.96.0-202.88.127.255
202.92.160.0-202.92.191.255
202.123.64.0-202.123.95.255
202.123.192.0-202.123.223.255
202.128.128.0-202.128.159.255
202.128.224.0-202.128.255.255
202.146.96.0-202.146.127.255
202.163.0.0-202.163.31.255
202.170.0.0-202.170.31.255
202.174.128.0-202.174.159.255
202.177.0.0-202.177.31.255
202.182.224.0-202.182.255.255
202.189.96.0-202.189.127.255
203.77.128.0-203.77.159.255
203.78.64.0-203.78.95.255
203.84.192.0-203.84.223.255
203.88.64.0-203.88.95.255
203.90.224.0-203.90.255.255
203.91.128.0-203.91.159.255
203.100.128.0-203.100.159.255
203.101.128.0-203.101.159.255
203.112.224.0-203.112.255.255
203.129.64.0-203.129.95.255
203.131.224.0-203.131.255.255
203.135.128.0-203.135.159.255
203.145.64.0-203.145.95.255
203.160.64.0-203.160.95.255
203.161.224.0-203.161.255.255
203.174.32.0-203.174.63.255
203.190.64.0-203.190.95.255
210.89.64.0-210.89.95.255
223.130.32.0-223.130.63.255
202.2.64.0-202.2.87.255
43.252.160.0-43.252.179.255
45.121.192.0-45.121.211.255
103.1.32.0-103.1.51.255
202.2.32.0-202.2.51.255
14.102.240.0-14.102.255.255
27.98.192.0-27.98.207.255
27.110.64.0-27.110.79.255
27.123.192.0-27.123.207.255
43.243.40.0-43.243.55.255
43.243.100.0-43.243.115.255
45.118.248.0-45.119.7.255
49.213.0.0-49.213.15.255
101.1.16.0-101.1.31.255
103.54.116.0-103.54.131.255
110.173.48.0-110.173.63.255
111.68.0.0-111.68.15.255
111.92.224.0-111.92.239.255
112.137.16.0-112.137.31.255
112.213.64.0-112.213.79.255
113.59.240.0-113.59.255.255
114.142.144.0-114.142.159.255
114.199.64.0-114.199.79.255
115.178.0.0-115.178.15.255
116.66.208.0-116.66.223.255
116.197.176.0-116.197.191.255
116.212.112.0-116.212.127.255
117.18.0.0-117.18.15.255
117.18.64.0-117.18.79.255
117.103.144.0-117.103.159.255
118.103.144.0-118.103.159.255
119.10.144.0-119.10.159.255
119.63.96.0-119.63.111.255
120.136.32.0-120.136.47.255
122.201.32.0-122.201.47.255
123.103.240.0-123.103.255.255
123.136.0.0-123.136.15.255
174.138.144.0-174.138.159.255
175.41.16.0-175.41.31.255
175.100.192.0-175.100.207.255
202.0.128.0-202.0.143.255
202.0.160.0-202.0.175.255
202.6.192.0-202.6.207.255
202.7.128.0-202.7.143.255
202.38.16.0-202.38.31.255
202.40.16.0-202.40.31.255
202.41.224.0-202.41.239.255
202.68.192.0-202.68.207.255
202.69.240.0-202.69.255.255
202.70.160.0-202.70.175.255
202.80.128.0-202.80.143.255
202.85.224.0-202.85.239.255
202.93.192.0-202.93.207.255
202.94.224.0-202.94.239.255
202.122.96.0-202.122.111.255
202.123.160.0-202.123.175.255
202.126.48.0-202.126.63.255
202.126.208.0-202.126.223.255
202.127.64.0-202.127.79.255
202.131.32.0-202.131.47.255
202.131.64.0-202.131.79.255
202.169.0.0-202.169.15.255
202.180.160.0-202.180.175.255
203.78.32.0-203.78.47.255
203.88.160.0-203.88.175.255
203.112.80.0-203.112.95.255
203.132.192.0-203.132.207.255
203.160.32.0-203.160.47.255
203.169.32.0-203.169.47.255
203.189.160.0-203.189.175.255
203.209.128.0-203.209.143.255
203.210.0.0-203.210.15.255
203.215.240.0-203.215.255.255
210.56.48.0-210.56.63.255
210.87.240.0-210.87.255.255
216.151.192.0-216.151.207.255
219.90.112.0-219.90.127.255
221.120.176.0-221.120.191.255
223.26.48.0-223.26.63.255
43.230.8.0-43.230.19.255
43.243.64.0-43.243.75.255
43.248.164.0-43.248.175.255
43.250.56.0-43.250.67.255
45.114.164.0-45.114.175.255
45.119.252.0-45.120.7.255
45.123.188.0-45.123.199.255
45.125.0.0-45.125.11.255
103.15.20.0-103.15.31.255
103.38.152.0-103.38.163.255
103.39.68.0-103.39.79.255
103.59.40.0-103.59.51.255
103.60.56.0-103.60.67.255
103.247.136.0-103.247.147.255
103.247.156.0-103.247.167.255
202.85.248.0-202.86.3.255
24.235.24.0-24.235.31.255
27.50.32.0-27.50.39.255
27.100.16.0-27.100.23.255
43.224.228.0-43.224.235.255
43.225.100.0-43.225.107.255
43.226.16.0-43.226.23.255
43.229.112.0-43.229.119.255
43.230.112.0-43.230.119.255
43.230.140.0-43.230.147.255
43.240.12.0-43.240.19.255
43.241.152.0-43.241.159.255
43.242.232.0-43.242.239.255
43.243.28.0-43.243.35.255
43.243.220.0-43.243.227.255
43.248.60.0-43.248.67.255
43.249.16.0-43.249.23.255
43.249.76.0-43.249.83.255
43.249.96.0-43.249.103.255
43.250.184.0-43.250.191.255
43.251.20.0-43.251.27.255
43.251.224.0-43.251.231.255
43.255.116.0-43.255.123.255
45.64.240.0-45.64.247.255
45.115.24.0-45.115.31.255
45.115.36.0-45.115.43.255
45.116.76.0-45.116.83.255
45.119.92.0-45.119.99.255
45.120.76.0-45.120.83.255
45.120.180.0-45.120.187.255
45.120.204.0-45.120.211.255
45.121.80.0-45.121.87.255
45.121.136.0-45.121.143.255
45.122.132.0-45.122.139.255
45.123.112.0-45.123.119.255
45.125.108.0-45.125.115.255
45.125.160.0-45.125.167.255
103.1.12.0-103.1.19.255
103.6.124.0-103.6.131.255
103.6.136.0-103.6.143.255
103.11.88.0-103.11.95.255
103.15.180.0-103.15.187.255
103.15.192.0-103.15.199.255
103.17.28.0-103.17.35.255
103.26.120.0-103.26.127.255
103.27.176.0-103.27.183.255
103.30.100.0-103.30.107.255
103.31.16.0-103.31.23.255
103.36.108.0-103.36.115.255
103.39.148.0-103.39.155.255
103.40.4.0-103.40.11.255
103.40.172.0-103.40.179.255
103.41.180.0-103.41.187.255
103.43.8.0-103.43.15.255
103.44.60.0-103.44.67.255
103.45.64.0-103.45.71.255
103.49.156.0-103.49.163.255
103.49.208.0-103.49.215.255
103.56.112.0-103.56.119.255
103.60.144.0-103.60.151.255
103.61.236.0-103.61.243.255
103.62.44.0-103.62.51.255
103.63.0.0-103.63.7.255
103.63.132.0-103.63.139.255
103.192.36.0-103.192.43.255
103.193.128.0-103.193.135.255
103.193.244.0-103.193.251.255
103.194.36.0-103.194.43.255
103.194.100.0-103.194.107.255
103.225.16.0-103.225.23.255
103.225.196.0-103.225.203.255
103.227.84.0-103.227.91.255
103.228.92.0-103.228.99.255
103.229.140.0-103.229.147.255
103.231.252.0-103.232.3.255
103.232.84.0-103.232.91.255
103.235.168.0-103.235.175.255
103.237.72.0-103.237.79.255
103.240.64.0-103.240.71.255
103.240.196.0-103.240.203.255
103.252.72.0-103.252.79.255
110.34.56.0-110.34.63.255
114.134.80.0-114.134.87.255
116.50.56.0-116.50.63.255
116.66.232.0-116.66.239.255
116.68.184.0-116.68.191.255
116.90.64.0-116.90.71.255
118.102.8.0-118.102.15.255
118.103.240.0-118.103.247.255
119.42.144.0-119.42.151.255
119.47.80.0-119.47.87.255
119.59.72.0-119.59.79.255
119.235.40.0-119.235.47.255
119.252.136.0-119.252.143.255
121.54.168.0-121.54.175.255
121.101.168.0-121.101.175.255
122.128.104.0-122.128.111.255
122.248.16.0-122.248.23.255
123.176.96.0-123.176.103.255
123.242.224.0-123.242.231.255
123.254.104.0-123.254.111.255
150.129.76.0-150.129.83.255
150.242.216.0-150.242.223.255
180.94.48.0-180.94.55.255
180.94.224.0-180.94.231.255
180.214.160.0-180.214.167.255
180.233.112.0-180.233.119.255
183.90.184.0-183.90.191.255
199.9.24.0-199.9.31.255
202.22.240.0-202.22.247.255
202.44.120.0-202.44.127.255
202.56.8.0-202.56.15.255
202.58.184.0-202.58.191.255
202.59.152.0-202.59.159.255
202.72.252.0-202.73.3.255
202.77.128.0-202.77.135.255
202.83.240.0-202.83.247.255
202.88.200.0-202.88.207.255
202.89.16.0-202.89.23.255
202.127.168.0-202.127.175.255
202.133.8.0-202.133.15.255
202.146.216.0-202.146.223.255
202.153.8.0-202.153.15.255
202.168.208.0-202.168.215.255
202.171.208.0-202.171.215.255
202.174.8.0-202.174.15.255
203.7.160.0-203.7.167.255
203.11.128.0-203.11.135.255
203.20.152.0-203.20.159.255
203.81.176.0-203.81.183.255
203.82.8.0-203.82.15.255
203.86.232.0-203.86.239.255
203.124.8.0-203.124.15.255
203.169.56.0-203.169.63.255
203.190.120.0-203.190.127.255
203.202.224.0-203.202.231.255
204.152.224.0-204.152.231.255
210.48.136.0-210.48.143.255
210.211.24.0-210.211.31.255
202.40.8.0-202.40.14.255
202.40.128.0-202.40.134.255
103.11.100.0-103.11.105.255
103.52.214.0-103.52.219.255
103.232.34.0-103.232.39.255
103.244.52.0-103.244.57.255
202.53.128.0-202.53.133.255
14.1.20.0-14.1.23.255
27.122.12.0-27.122.15.255
36.37.32.0-36.37.35.255
43.224.4.0-43.224.7.255
43.224.28.0-43.224.31.255
43.224.48.0-43.224.51.255
43.224.92.0-43.224.95.255
43.224.148.0-43.224.151.255
43.224.196.0-43.224.199.255
43.224.244.0-43.224.247.255
43.225.8.0-43.225.11.255
43.225.28.0-43.225.31.255
43.225.44.0-43.225.47.255
43.225.56.0-43.225.59.255
43.225.132.0-43.225.135.255
43.225.196.0-43.225.199.255
43.226.4.0-43.226.7.255
43.226.124.0-43.226.127.255
43.226.228.0-43.226.231.255
43.227.12.0-43.227.15.255
43.227.112.0-43.227.115.255
43.227.236.0-43.227.239.255
43.228.88.0-43.228.91.255
43.228.124.0-43.228.127.255
43.228.200.0-43.228.203.255
43.228.216.0-43.228.219.255
43.229.4.0-43.229.7.255
43.229.28.0-43.229.31.255
43.229.36.0-43.229.39.255
43.229.52.0-43.229.55.255
43.229.152.0-43.229.155.255
43.229.212.0-43.229.215.255
43.230.88.0-43.230.91.255
43.230.96.0-43.230.99.255
43.230.164.0-43.230.167.255
43.230.188.0-43.230.191.255
43.230.204.0-43.230.207.255
43.231.0.0-43.231.3.255
43.231.8.0-43.231.11.255
43.231.16.0-43.231.19.255
43.231.184.0-43.231.187.255
43.231.196.0-43.231.199.255
43.239.64.0-43.239.67.255
43.240.28.0-43.240.31.255
43.240.36.0-43.240.39.255
43.240.92.0-43.240.95.255
43.240.116.0-43.240.119.255
43.241.44.0-43.241.47.255
43.241.72.0-43.241.75.255
43.241.100.0-43.241.103.255
43.241.204.0-43.241.207.255
43.242.0.0-43.242.3.255
43.242.32.0-43.242.35.255
43.242.108.0-43.242.111.255
43.242.128.0-43.242.131.255
43.242.140.0-43.242.143.255
43.242.172.0-43.242.175.255
43.242.200.0-43.242.203.255
43.243.92.0-43.243.95.255
43.243.120.0-43.243.123.255
43.243.164.0-43.243.167.255
43.243.176.0-43.243.179.255
43.243.192.0-43.243.195.255
43.243.208.0-43.243.211.255
43.243.240.0-43.243.243.255
43.243.248.0-43.243.251.255
43.245.48.0-43.245.51.255
43.247.0.0-43.247.3.255
43.247.132.0-43.247.135.255
43.247.164.0-43.247.167.255
43.248.8.0-43.248.11.255
43.248.224.0-43.248.227.255
43.248.248.0-43.248.251.255
43.249.28.0-43.249.31.255
43.249.88.0-43.249.91.255
43.249.124.0-43.249.127.255
43.249.172.0-43.249.175.255
43.249.204.0-43.249.207.255
43.249.220.0-43.249.223.255
43.249.252.0-43.249.255.255
43.250.8.0-43.250.11.255
43.250.48.0-43.250.51.255
43.251.32.0-43.251.35.255
43.251.44.0-43.251.47.255
43.251.76.0-43.251.79.255
43.251.104.0-43.251.107.255
43.251.132.0-43.251.135.255
43.251.140.0-43.251.143.255
43.251.160.0-43.251.163.255
43.251.196.0-43.251.199.255
43.251.248.0-43.251.251.255
43.252.52.0-43.252.55.255
43.252.84.0-43.252.87.255
43.252.132.0-43.252.135.255
43.252.148.0-43.252.151.255
43.252.200.0-43.252.203.255
43.252.208.0-43.252.211.255
43.252.228.0-43.252.231.255
43.254.164.0-43.254.167.255
43.254.216.0-43.254.219.255
43.255.36.0-43.255.39.255
43.255.52.0-43.255.55.255
43.255.80.0-43.255.83.255
43.255.104.0-43.255.107.255
43.255.156.0-43.255.159.255
43.255.188.0-43.255.191.255
45.64.52.0-45.64.55.255
45.64.64.0-45.64.67.255
45.64.108.0-45.64.111.255
45.112.24.0-45.112.27.255
45.112.204.0-45.112.207.255
45.112.240.0-45.112.243.255
45.113.0.0-45.113.3.255
45.113.32.0-45.113.35.255
45.113.68.0-45.113.71.255
45.113.80.0-45.113.83.255
45.113.112.0-45.113.115.255
45.113.128.0-45.113.131.255
45.113.140.0-45.113.143.255
45.113.160.0-45.113.163.255
45.113.192.0-45.113.195.255
45.114.8.0-45.114.11.255
45.114.24.0-45.114.27.255
45.114.44.0-45.114.47.255
45.114.92.0-45.114.95.255
45.114.204.0-45.114.207.255
45.115.124.0-45.115.127.255
45.115.160.0-45.115.163.255
45.115.240.0-45.115.243.255
45.116.8.0-45.116.11.255
45.116.40.0-45.116.43.255
45.116.144.0-45.116.147.255
45.116.168.0-45.116.171.255
45.116.212.0-45.116.215.255
45.117.96.0-45.117.99.255
45.117.144.0-45.117.147.255
45.117.192.0-45.117.195.255
45.118.124.0-45.118.127.255
45.119.124.0-45.119.127.255
45.120.28.0-45.120.31.255
45.120.52.0-45.120.55.255
45.120.152.0-45.120.155.255
45.120.168.0-45.120.171.255
45.120.216.0-45.120.219.255
45.121.32.0-45.121.35.255
45.121.56.0-45.121.59.255
45.122.52.0-45.122.55.255
45.122.156.0-45.122.159.255
45.123.20.0-45.123.23.255
45.124.8.0-45.124.11.255
45.124.24.0-45.124.27.255
45.124.64.0-45.124.67.255
45.124.72.0-45.124.75.255
45.124.112.0-45.124.115.255
45.124.132.0-45.124.135.255
45.124.160.0-45.124.163.255
45.125.48.0-45.125.51.255
45.125.64.0-45.125.67.255
45.125.72.0-45.125.75.255
45.125.216.0-45.125.219.255
49.143.232.0-49.143.235.255
101.1.4.0-101.1.7.255
101.101.96.0-101.101.99.255
103.1.64.0-103.1.67.255
103.1.156.0-103.1.159.255
103.1.224.0-103.1.227.255
103.3.24.0-103.3.27.255
103.4.244.0-103.4.247.255
103.5.12.0-103.5.15.255
103.5.220.0-103.5.223.255
103.6.4.0-103.6.7.255
103.6.48.0-103.6.51.255
103.6.84.0-103.6.87.255
103.6.152.0-103.6.155.255
103.6.176.0-103.6.179.255
103.6.192.0-103.6.195.255
103.7.160.0-103.7.163.255
103.7.240.0-103.7.243.255
103.9.244.0-103.9.247.255
103.10.12.0-103.10.15.255
103.11.36.0-103.11.39.255
103.11.108.0-103.11.111.255
103.11.228.0-103.11.231.255
103.11.244.0-103.11.247.255
103.12.60.0-103.12.63.255
103.12.140.0-103.12.143.255
103.12.148.0-103.12.151.255
103.12.216.0-103.12.219.255
103.13.48.0-103.13.51.255
103.13.188.0-103.13.191.255
103.13.232.0-103.13.235.255
103.14.116.0-103.14.119.255
103.14.144.0-103.14.147.255
103.14.220.0-103.14.223.255
103.15.84.0-103.15.87.255
103.15.120.0-103.15.123.255
103.15.132.0-103.15.135.255
103.15.216.0-103.15.219.255
103.16.116.0-103.16.119.255
103.16.184.0-103.16.187.255
103.16.216.0-103.16.219.255
103.16.228.0-103.16.231.255
103.16.252.0-103.16.255.255
103.17.72.0-103.17.75.255
103.17.92.0-103.17.95.255
103.17.116.0-103.17.119.255
103.17.196.0-103.17.199.255
103.18.184.0-103.18.187.255
103.19.24.0-103.19.27.255
103.19.84.0-103.19.87.255
103.19.188.0-103.19.191.255
103.19.236.0-103.19.239.255
103.20.60.0-103.20.63.255
103.20.96.0-103.20.99.255
103.20.172.0-103.20.175.255
103.20.192.0-103.20.195.255
103.20.220.0-103.20.223.255
103.20.228.0-103.20.231.255
103.20.236.0-103.20.239.255
103.21.220.0-103.21.223.255
103.21.244.0-103.21.247.255
103.22.96.0-103.22.99.255
103.22.160.0-103.22.163.255
103.22.200.0-103.22.203.255
103.23.168.0-103.23.171.255
103.23.192.0-103.23.195.255
103.24.0.0-103.24.3.255
103.24.92.0-103.24.95.255
103.24.152.0-103.24.155.255
103.24.204.0-103.24.207.255
103.24.216.0-103.24.219.255
103.24.224.0-103.24.227.255
103.25.60.0-103.25.63.255
103.25.72.0-103.25.75.255
103.25.104.0-103.25.107.255
103.25.252.0-103.25.255.255
103.26.92.0-103.26.95.255
103.26.144.0-103.26.147.255
103.26.220.0-103.26.223.255
103.27.108.0-103.27.111.255
103.27.124.0-103.27.127.255
103.28.44.0-103.28.47.255
103.28.76.0-103.28.79.255
103.28.144.0-103.28.147.255
103.29.12.0-103.29.15.255
103.29.72.0-103.29.75.255
103.29.92.0-103.29.95.255
103.29.140.0-103.29.143.255
103.30.4.0-103.30.7.255
103.30.16.0-103.30.19.255
103.30.24.0-103.30.27.255
103.30.40.0-103.30.43.255
103.30.48.0-103.30.51.255
103.30.68.0-103.30.71.255
103.30.76.0-103.30.79.255
103.30.232.0-103.30.235.255
103.30.240.0-103.30.243.255
103.31.8.0-103.31.11.255
103.31.72.0-103.31.75.255
103.31.96.0-103.31.99.255
103.31.136.0-103.31.139.255
103.31.184.0-103.31.187.255
103.31.220.0-103.31.223.255
103.31.240.0-103.31.243.255
103.36.52.0-103.36.55.255
103.36.88.0-103.36.91.255
103.37.4.0-103.37.7.255
103.37.40.0-103.37.43.255
103.37.60.0-103.37.63.255
103.37.84.0-103.37.87.255
103.37.184.0-103.37.187.255
103.37.232.0-103.37.235.255
103.38.20.0-103.38.23.255
103.38.28.0-103.38.31.255
103.38.64.0-103.38.67.255
103.38.80.0-103.38.83.255
103.38.104.0-103.38.107.255
103.38.168.0-103.38.171.255
103.39.24.0-103.39.27.255
103.39.56.0-103.39.59.255
103.40.84.0-103.40.87.255
103.40.152.0-103.40.155.255
103.40.160.0-103.40.163.255
103.40.208.0-103.40.211.255
103.41.4.0-103.41.7.255
103.41.48.0-103.41.51.255
103.41.64.0-103.41.67.255
103.41.80.0-103.41.83.255
103.41.104.0-103.41.107.255
103.41.124.0-103.41.127.255
103.41.132.0-103.41.135.255
103.41.172.0-103.41.175.255
103.41.248.0-103.41.251.255
103.42.12.0-103.42.15.255
103.42.36.0-103.42.39.255
103.42.60.0-103.42.63.255
103.42.100.0-103.42.103.255
103.42.176.0-103.42.179.255
103.43.28.0-103.43.31.255
103.43.60.0-103.43.63.255
103.43.68.0-103.43.71.255
103.43.172.0-103.43.175.255
103.43.216.0-103.43.219.255
103.43.236.0-103.43.239.255
103.43.244.0-103.43.247.255
103.44.20.0-103.44.23.255
103.44.28.0-103.44.31.255
103.44.160.0-103.44.163.255
103.44.232.0-103.44.235.255
103.46.140.0-103.46.143.255
103.46.184.0-103.46.187.255
103.46.224.0-103.46.227.255
103.47.24.0-103.47.27.255
103.47.112.0-103.47.115.255
103.47.176.0-103.47.179.255
103.48.4.0-103.48.7.255
103.48.132.0-103.48.135.255
103.48.140.0-103.48.143.255
103.48.168.0-103.48.171.255
103.49.8.0-103.49.11.255
103.49.60.0-103.49.63.255
103.49.132.0-103.49.135.255
103.50.8.0-103.50.11.255
103.50.16.0-103.50.19.255
103.50.88.0-103.50.91.255
103.50.96.0-103.50.99.255
103.50.252.0-103.50.255.255
103.51.12.0-103.51.15.255
103.51.108.0-103.51.111.255
103.51.144.0-103.51.147.255
103.52.112.0-103.52.115.255
103.52.152.0-103.52.155.255
103.52.188.0-103.52.191.255
103.53.8.0-103.53.11.255
103.53.48.0-103.53.51.255
103.53.224.0-103.53.227.255
103.54.4.0-103.54.7.255
103.54.44.0-103.54.47.255
103.54.176.0-103.54.179.255
103.54.192.0-103.54.195.255
103.55.8.0-103.55.11.255
103.55.20.0-103.55.23.255
103.55.28.0-103.55.31.255
103.55.128.0-103.55.131.255
103.55.200.0-103.55.203.255
103.56.24.0-103.56.27.255
103.56.44.0-103.56.47.255
103.56.136.0-103.56.139.255
103.56.192.0-103.56.195.255
103.57.24.0-103.57.27.255
103.57.200.0-103.57.203.255
103.57.228.0-103.57.231.255
103.58.176.0-103.58.179.255
103.59.144.0-103.59.147.255
103.60.108.0-103.60.111.255
103.60.220.0-103.60.223.255
103.60.232.0-103.60.235.255
103.60.248.0-103.60.251.255
103.61.0.0-103.61.3.255
103.61.20.0-103.61.23.255
103.61.28.0-103.61.31.255
103.61.36.0-103.61.39.255
103.61.120.0-103.61.123.255
103.61.144.0-103.61.147.255
103.61.168.0-103.61.171.255
103.61.220.0-103.61.223.255
103.62.148.0-103.62.151.255
103.63.236.0-103.63.239.255
103.192.160.0-103.192.163.255
103.192.176.0-103.192.179.255
103.192.200.0-103.192.203.255
103.192.224.0-103.192.227.255
103.193.32.0-103.193.35.255
103.193.68.0-103.193.71.255
103.193.172.0-103.193.175.255
103.194.148.0-103.194.151.255
103.224.56.0-103.224.59.255
103.224.72.0-103.224.75.255
103.224.248.0-103.224.251.255
103.225.8.0-103.225.11.255
103.225.212.0-103.225.215.255
103.225.248.0-103.225.251.255
103.226.92.0-103.226.95.255
103.226.124.0-103.226.127.255
103.226.152.0-103.226.155.255
103.227.104.0-103.227.107.255
103.227.128.0-103.227.131.255
103.227.192.0-103.227.195.255
103.228.64.0-103.228.67.255
103.228.108.0-103.228.111.255
103.228.180.0-103.228.183.255
103.229.28.0-103.229.31.255
103.229.52.0-103.229.55.255
103.229.116.0-103.229.119.255
103.229.180.0-103.229.183.255
103.229.188.0-103.229.191.255
103.229.196.0-103.229.199.255
103.230.108.0-103.230.111.255
103.230.120.0-103.230.123.255
103.230.136.0-103.230.139.255
103.230.160.0-103.230.163.255
103.230.192.0-103.230.195.255
103.230.216.0-103.230.219.255
103.230.228.0-103.230.231.255
103.230.240.0-103.230.243.255
103.231.12.0-103.231.15.255
103.231.28.0-103.231.31.255
103.231.56.0-103.231.59.255
103.231.84.0-103.231.87.255
103.231.104.0-103.231.107.255
103.231.140.0-103.231.143.255
103.231.152.0-103.231.155.255
103.231.164.0-103.231.167.255
103.232.16.0-103.232.19.255
103.232.68.0-103.232.71.255
103.232.220.0-103.232.223.255
103.233.96.0-103.233.99.255
103.233.164.0-103.233.167.255
103.233.184.0-103.233.187.255
103.233.232.0-103.233.235.255
103.233.248.0-103.233.251.255
103.234.16.0-103.234.19.255
103.234.32.0-103.234.35.255
103.234.52.0-103.234.55.255
103.234.96.0-103.234.99.255
103.234.140.0-103.234.143.255
103.234.220.0-103.234.223.255
103.234.244.0-103.234.247.255
103.235.4.0-103.235.7.255
103.235.44.0-103.235.47.255
103.235.100.0-103.235.103.255
103.235.216.0-103.235.219.255
103.237.128.0-103.237.131.255
103.238.128.0-103.238.131.255
103.238.224.0-103.238.227.255
103.239.12.0-103.239.15.255
103.239.28.0-103.239.31.255
103.239.64.0-103.239.67.255
103.239.72.0-103.239.75.255
103.239.100.0-103.239.103.255
103.240.40.0-103.240.43.255
103.240.80.0-103.240.83.255
103.240.92.0-103.240.95.255
103.240.140.0-103.240.143.255
103.240.148.0-103.240.151.255
103.240.180.0-103.240.183.255
103.241.16.0-103.241.19.255
103.241.48.0-103.241.51.255
103.241.108.0-103.241.111.255
103.241.164.0-103.241.167.255
103.242.0.0-103.242.3.255
103.242.72.0-103.242.75.255
103.242.100.0-103.242.103.255
103.242.108.0-103.242.111.255
103.242.140.0-103.242.143.255
103.243.0.0-103.243.3.255
103.243.92.0-103.243.95.255
103.243.100.0-103.243.103.255
103.243.128.0-103.243.131.255
103.243.164.0-103.243.167.255
103.243.180.0-103.243.183.255
103.244.0.0-103.244.3.255
103.244.24.0-103.244.27.255
103.244.44.0-103.244.47.255
103.244.88.0-103.244.91.255
103.244.148.0-103.244.151.255
103.244.156.0-103.244.159.255
103.244.224.0-103.244.227.255
103.245.28.0-103.245.31.255
103.245.208.0-103.245.211.255
103.246.160.0-103.246.163.255
103.246.176.0-103.246.179.255
103.246.244.0-103.246.247.255
103.247.92.0-103.247.95.255
103.247.108.0-103.247.111.255
103.247.228.0-103.247.231.255
103.248.36.0-103.248.39.255
103.248.76.0-103.248.79.255
103.248.108.0-103.248.111.255
103.248.140.0-103.248.143.255
103.248.184.0-103.248.187.255
103.248.240.0-103.248.243.255
103.248.252.0-103.248.255.255
103.249.32.0-103.249.35.255
103.249.108.0-103.249.111.255
103.249.196.0-103.249.199.255
103.250.12.0-103.250.15.255
103.250.52.0-103.250.55.255
103.251.36.0-103.251.39.255
103.251.88.0-103.251.91.255
103.251.112.0-103.251.115.255
103.251.164.0-103.251.167.255
103.252.16.0-103.252.19.255
103.252.88.0-103.252.91.255
103.252.132.0-103.252.135.255
103.252.240.0-103.252.243.255
103.253.8.0-103.253.11.255
103.253.40.0-103.253.43.255
103.253.96.0-103.253.99.255
103.253.120.0-103.253.123.255
103.253.140.0-103.253.143.255
103.253.236.0-103.253.239.255
103.253.248.0-103.253.251.255
103.254.108.0-103.254.111.255
103.254.116.0-103.254.119.255
103.254.148.0-103.254.151.255
103.254.208.0-103.254.211.255
103.254.252.0-103.254.255.255
103.255.44.0-103.255.47.255
103.255.60.0-103.255.63.255
103.255.176.0-103.255.179.255
103.255.252.0-103.255.255.255
110.76.188.0-110.76.191.255
110.92.76.0-110.92.79.255
111.91.236.0-111.91.239.255
111.235.152.0-111.235.155.255
113.20.20.0-113.20.23.255
113.20.132.0-113.20.135.255
113.29.252.0-113.29.255.255
113.52.132.0-113.52.135.255
116.251.204.0-116.251.207.255
117.104.188.0-117.104.191.255
119.10.168.0-119.10.171.255
122.200.132.0-122.200.135.255
123.108.108.0-123.108.111.255
150.107.0.0-150.107.3.255
150.107.44.0-150.107.47.255
150.107.200.0-150.107.203.255
150.129.8.0-150.129.11.255
150.129.32.0-150.129.35.255
150.129.40.0-150.129.43.255
150.129.136.0-150.129.139.255
150.129.208.0-150.129.211.255
150.242.36.0-150.242.39.255
150.242.124.0-150.242.127.255
150.242.208.0-150.242.211.255
150.242.228.0-150.242.231.255
163.53.16.0-163.53.19.255
163.53.216.0-163.53.219.255
163.53.224.0-163.53.227.255
175.100.164.0-175.100.167.255
175.111.96.0-175.111.99.255
180.92.180.0-180.92.183.255
180.149.252.0-180.149.255.255
180.222.200.0-180.222.203.255
180.235.132.0-180.235.135.255
182.173.76.0-182.173.79.255
182.237.0.0-182.237.3.255
182.255.24.0-182.255.27.255
183.182.80.0-183.182.83.255
185.103.28.0-185.103.31.255
202.0.180.0-202.0.183.255
202.8.88.0-202.8.91.255
202.12.4.0-202.12.7.255
202.40.146.0-202.40.149.255
202.40.151.0-202.40.154.255
202.40.168.0-202.40.171.255
202.57.220.0-202.57.223.255
202.69.0.0-202.69.3.255
202.69.128.0-202.69.131.255
202.74.0.0-202.74.3.255
202.75.0.0-202.75.3.255
202.78.252.0-202.78.255.255
202.87.0.0-202.87.3.255
202.89.0.0-202.89.3.255
202.89.120.0-202.89.123.255
202.89.252.0-202.89.255.255
202.90.248.0-202.90.251.255
202.124.28.0-202.124.31.255
202.162.184.0-202.162.187.255
203.80.0.0-203.80.3.255
203.81.252.0-203.81.255.255
203.82.252.0-203.82.255.255
203.110.236.0-203.110.239.255
203.114.252.0-203.114.255.255
203.161.4.0-203.161.7.255
203.166.220.0-203.166.223.255
203.170.28.0-203.170.31.255
205.147.104.0-205.147.107.255
206.220.132.0-206.220.135.255
206.225.128.0-206.225.131.255
223.27.160.0-223.27.163.255
223.29.248.0-223.29.251.255
223.223.216.0-223.223.219.255
223.255.240.0-223.255.243.255
202.40.137.0-202.40.139.255
203.78.5.0-203.78.7.255
103.4.112.0-103.4.113.255
103.6.160.0-103.6.161.255
103.7.54.0-103.7.55.255
103.10.124.0-103.10.125.255
103.13.176.0-103.13.177.255
103.16.26.0-103.16.27.255
103.23.68.0-103.23.69.255
103.38.90.0-103.38.91.255
103.39.40.0-103.39.41.255
103.40.110.0-103.40.111.255
103.47.88.0-103.47.89.255
103.48.28.0-103.48.29.255
103.48.48.0-103.48.49.255
103.49.246.0-103.49.247.255
103.53.152.0-103.53.153.255
103.55.112.0-103.55.113.255
103.57.224.0-103.57.225.255
103.59.90.0-103.59.91.255
103.230.34.0-103.230.35.255
103.237.54.0-103.237.55.255
103.242.148.0-103.242.149.255
103.245.190.0-103.245.191.255
103.251.198.0-103.251.199.255
116.193.158.0-116.193.159.255
163.47.44.0-163.47.45.255
192.64.203.0-192.64.204.255
202.1.6.0-202.1.7.255
202.3.6.0-202.3.7.255
202.4.26.0-202.4.27.255
202.6.0.0-202.6.1.255
202.20.100.0-202.20.101.255
202.38.178.0-202.38.179.255
202.40.141.0-202.40.142.255
202.40.160.0-202.40.161.255
202.43.82.0-202.43.83.255
202.45.4.0-202.45.5.255
202.45.8.0-202.45.9.255
202.45.130.0-202.45.131.255
202.52.42.0-202.52.43.255
202.53.141.0-202.53.142.255
202.74.40.0-202.74.41.255
202.74.50.0-202.74.51.255
202.125.90.0-202.125.91.255
202.128.104.0-202.128.105.255
203.31.32.0-203.31.33.255
203.56.90.0-203.56.91.255
203.82.222.0-203.82.223.255
203.83.216.0-203.83.217.255
203.83.248.0-203.83.249.255
203.84.128.0-203.84.129.255
203.86.252.0-203.86.253.255
203.89.6.0-203.89.7.255
203.90.6.0-203.90.7.255
203.147.110.0-203.147.111.255
203.153.4.0-203.153.5.255
203.170.90.0-203.170.91.255
203.176.114.0-203.176.115.255
203.189.26.0-203.189.27.255
203.190.38.0-203.190.39.255
203.191.3.0-203.191.4.255
208.87.166.0-208.87.167.255
218.100.16.0-218.100.17.255
43.250.235.0-43.250.235.255
45.116.130.0-45.116.130.255
103.5.149.0-103.5.149.255
103.5.198.0-103.5.198.255
103.6.166.0-103.6.166.255
103.8.191.0-103.8.191.255
103.10.108.0-103.10.108.255
103.10.197.0-103.10.197.255
103.10.199.0-103.10.199.255
103.15.38.0-103.15.38.255
103.15.158.0-103.15.158.255
103.19.38.0-103.19.38.255
103.20.165.0-103.20.165.255
103.24.15.0-103.24.15.255
103.27.0.0-103.27.0.255
103.30.212.0-103.30.212.255
103.36.70.0-103.36.70.255
103.38.144.0-103.38.144.255
103.40.225.0-103.40.225.255
103.42.191.0-103.42.191.255
103.44.109.0-103.44.109.255
103.47.61.0-103.47.61.255
103.48.26.0-103.48.26.255
103.49.126.0-103.49.126.255
103.55.218.0-103.55.218.255
103.57.90.0-103.57.90.255
103.58.181.0-103.58.181.255
103.224.20.0-103.224.20.255
103.224.22.0-103.224.22.255
103.224.106.0-103.224.106.255
103.228.82.0-103.228.82.255
103.230.32.0-103.230.32.255
103.233.72.0-103.233.72.255
103.239.126.0-103.239.126.255
103.239.164.0-103.239.164.255
103.240.221.0-103.240.221.255
103.243.18.0-103.243.18.255
103.246.38.0-103.246.38.255
103.246.77.0-103.246.77.255
103.246.79.0-103.246.79.255
103.246.216.0-103.246.216.255
103.250.41.0-103.250.41.255
103.252.162.0-103.252.162.255
103.255.127.0-103.255.127.255
134.42.224.0-134.42.224.255
192.94.174.0-192.94.174.255
192.207.91.0-192.207.91.255
192.245.196.0-192.245.196.255
192.245.208.0-192.245.208.255
198.99.173.0-198.99.173.255
198.179.225.0-198.179.225.255
199.43.19.0-199.43.19.255
199.43.45.0-199.43.45.255
199.43.63.0-199.43.63.255
202.0.77.0-202.0.77.255
202.1.2.0-202.1.2.255
202.1.232.0-202.1.232.255
202.6.94.0-202.6.94.255
202.8.31.0-202.8.31.255
202.8.93.0-202.8.93.255
202.9.82.0-202.9.82.255
202.14.80.0-202.14.80.255
202.20.98.0-202.20.98.255
202.20.111.0-202.20.111.255
202.20.118.0-202.20.118.255
202.40.157.0-202.40.157.255
202.45.14.0-202.45.14.255
202.45.128.0-202.45.128.255
202.45.148.0-202.45.148.255
202.52.35.0-202.52.35.255
202.52.136.0-202.52.136.255
202.59.249.0-202.59.249.255
202.61.103.0-202.61.103.255
202.74.35.0-202.74.35.255
202.94.75.0-202.94.75.255
202.94.87.0-202.94.87.255
202.128.99.0-202.128.99.255
202.134.55.0-202.134.55.255
202.164.27.0-202.164.27.255
202.168.95.0-202.168.95.255
202.174.121.0-202.174.121.255
203.14.166.0-203.14.166.255
203.16.239.0-203.16.239.255
203.18.50.0-203.18.50.255
203.29.222.0-203.29.222.255
203.56.87.0-203.56.87.255
203.56.253.0-203.56.253.255
203.84.133.0-203.84.133.255
203.99.143.0-203.99.143.255
203.99.254.0-203.99.254.255
203.100.57.0-203.100.57.255
203.119.2.0-203.119.2.255
203.119.87.0-203.119.87.255
203.170.49.0-203.170.49.255
203.208.20.0-203.208.20.255
203.217.175.0-203.217.175.255
203.223.178.0-203.223.178.255
204.79.169.0-204.79.169.255
204.79.189.0-204.79.189.255
'''




logging.basicConfig(format="[%(threadName)s]%(message)s",level=logging.INFO)


evt_ipramdomstart = threading.Event()
evt_ipramdomend = threading.Event()

def PRINT(strlog):
    logging.info(strlog)
    
def isgoolgledomain(domain):
    lowerdomain = domain.lower()
    if g_ssldomain in lowerdomain:
    #print 'fuckkkkkkkkkkkkkkkkkk k%r'%(lowerdomain)
        return 1
    if lowerdomain in g_excludessdomain:
        return 0
    return 2

def isgoogleserver(svrname):
    lowerdomain = svrname.lower()
    if lowerdomain == "gws":
        return True
    elif lowerdomain == "gvs 1.0":
        return True
    else:
        return False

def checkvalidssldomain(domain,svrname):
    ret = isgoolgledomain(domain)
    if ret == 1:
        return True
    elif ret == 0:
        return False
    elif len(svrname) > 0 and isgoogleserver(svrname):
        return True
    else:
        return False

prekey="\nServer:"
def getgooglesvrnamefromheader(header):
    begin = header.find(prekey)
    if begin != -1: 
        begin += len(prekey)
        end = header.find("\n",begin)
        if end == -1:
            end = len(header)
        gws = header[begin:end].strip(" \t")
        return gws
    return ""

g_NAtimeout = 1000000
def getcosttime(costtime):
    if costtime.startswith("NA_"):
        return g_NAtimeout
    else:
        return int(costtime)

class TCacheResult(object):
    __slots__ = ["oklist","failiplist","oklock","errlock","okfile","errorfile","notfile","validipcnt","filegwsipset","okfilelinecnt"]
    def __init__(self):
        self.oklist = list()
        self.failiplist = list()
        self.oklock = threading.Lock()
        self.errlock = threading.Lock()
        self.okfile = None
        self.errorfile = None
        self.notfile = None
        self.validipcnt = 0
        self.filegwsipset = set()
        self.okfilelinecnt = 0
    
    def addOKIP(self,costtime,ip,ssldomain,gwsname):
        bOK = False
        try:
            self.oklock.acquire()
            if checkvalidssldomain(ssldomain,gwsname):
                bOK = True
                self.oklist.append((costtime,ip,ssldomain,gwsname))
            if not bOK:
                if self.notfile is None:
                    self.notfile = open(g_tmpnofile,"a+",0)
                self.notfile.seek(0,2)
                line = "%s %d %s %s\n" % (ip, costtime, ssldomain,gwsname)
                self.notfile.write(line)
            else:
                if self.okfile is None:
                    self.okfile = open(g_tmpokfile,"a+",0)
                self.okfile.seek(0,2)
                line = "%s %d %s %s\n" % (ip, costtime, ssldomain,gwsname)
                self.okfile.write(line)
            if bOK and costtime <= g_maxhandletimeout:
                self.validipcnt += 1
                return bOK,self.validipcnt
            else:
                return bOK,0
        finally:
            self.oklock.release()
            
    def addFailIP(self,ip):
        try:
            self.errlock.acquire()
            #如果之前是google ip,不需要记录到失败文件，下次启动可以继续尝试该 ip
            if ip not in self.filegwsipset:
                if self.errorfile is None:
                    self.errorfile = open(g_tmperrorfile,"a+",0)
                self.errorfile.seek(0,2)
                self.errorfile.write(ip+"\n")
            self.failiplist.append(ip)
            if len(self.failiplist) > 128:
                self.flushFailIP()
        finally:
            self.errlock.release() 
    
    def close(self):
        def closefile(fileobj):
            if fileobj:
                fileobj.close()
                fileobj = None
        closefile(self.okfile)
        closefile(self.notfile)
        closefile(self.errorfile)
       
    def getIPResult(self):
        return self.oklist
    
    def flushFailIP(self):
        nLen = len(self.failiplist)
        if nLen > 0 :
            self.failiplist = list()
            PRINT( "%d ip timeout" % nLen )

    def loadLastResult(self):
        okresult  = set()
        errorresult = set()
        if os.path.exists(g_tmpnofile):
            with open(g_tmpnofile,"r") as fd:
                for line in fd:
                    ips = line.strip("\r\n").split(" ")
                    ipint = from_string(ips[0])
                    okresult.add(ipint)
        if os.path.exists(g_tmpokfile):
            with open(g_tmpokfile,"r") as fd:
                self.okfilelinecnt = 0
                for line in fd:
                    self.okfilelinecnt += 1
                    ips = line.strip("\r\n").split(" ")
                    if len(ips) < 3:
                        continue
                    gwsname = ""
                    if len(ips) > 3:
                        gwsname = " ".join(ips[3:])
                    ipint = from_string(ips[0])
                    # 如果为google ip,每次都需要检查，如果不是，则跳过检查
                    if not checkvalidssldomain(ips[2],gwsname):
                        okresult.add(ipint)
                    else:
                        self.filegwsipset.add(ips[0])
                        if ipint in okresult:
                            okresult.remove(ipint)
        if os.path.exists(g_tmperrorfile):
            with open(g_tmperrorfile,"r") as fd:
                for line in fd:
                    ips = line.strip("\r\n").split(" ")
                    for item in ips:
                        errorresult.add(from_string(item))
        return okresult,errorresult
    
    def clearFile(self):
        self.close()
        if g_autodeltmpnofile and os.path.exists(g_tmpnofile):
            os.remove(g_tmpnofile)
            PRINT("remove file %s" % g_tmpokfile)
        if g_autodeltmperrorfile and os.path.exists(g_tmperrorfile):
            os.remove(g_tmperrorfile)
            PRINT("remove file %s" % g_tmperrorfile)
            
    def queryfinish(self):
        try:
            self.oklock.acquire()
            return self.validipcnt >= g_maxhandleipcnt
        finally:
            self.oklock.release()

class my_ssl_wrap(object):
    ssl_cxt = None
    ssl_cxt_lock = threading.Lock()
    httpreq = "GET / HTTP/1.1\r\nAccept: */*\r\nHost: %s\r\nConnection: Keep-Alive\r\n\r\n"

    def __init__(self):
        pass

    @staticmethod
    def initsslcxt():
        if my_ssl_wrap.ssl_cxt is not None:
            return
        try:
            my_ssl_wrap.ssl_cxt_lock.acquire()
            if my_ssl_wrap.ssl_cxt is not None:
                return
            my_ssl_wrap.ssl_cxt = OpenSSL.SSL.Context(OpenSSL.SSL.TLSv1_METHOD)
            my_ssl_wrap.ssl_cxt.set_timeout(g_handshaketimeout)
            PRINT("init ssl context ok")
        except Exception:
            raise
        finally:
            my_ssl_wrap.ssl_cxt_lock.release()

    def getssldomain(self, threadname, ip):
        time_begin = time.time()
        s = None
        c = None
        haserror = 1
        timeout = 0
        domain = None
        gwsname = ""
        ssl_orgname = ""
        try:
            s = socket.socket()
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            if g_useOpenSSL:
                my_ssl_wrap.initsslcxt()
                s.settimeout(g_conntimeout)
                s.connect((ip, 443))
                c = OpenSSL.SSL.Connection(my_ssl_wrap.ssl_cxt, s)
                c.set_connect_state()
                s.setblocking(0)
                while True:
                    try:
                        c.do_handshake()
                        break
                    except SSLError:
                        infds, outfds, errfds = select.select([s, ], [], [], g_handshaketimeout)
                        if len(infds) == 0:
                            raise SSLError("do_handshake timed out")
                        else:
                            costtime = int(time.time() - time_begin)
                            if costtime > g_handshaketimeout:
                                raise SSLError("do_handshake timed out")
                            else:
                                pass
                    except OpenSSL.SSL.SysCallError as e:
                        raise SSLError(e.args)
                time_end = time.time()
                cert = c.get_peer_certificate()
                costtime = int(time_end * 1000 - time_begin * 1000)
                for subject in cert.get_subject().get_components():
                    if subject[0] == "CN":
                        domain = subject[1]
                        haserror = 0
                    elif subject[0] == "O":
                        ssl_orgname = subject[1]
                if domain is None:
                    PRINT("%s can not get CN: %s " % (ip, cert.get_subject().get_components()))
                if ssl_orgname == "" or ssl_orgname not in g_organizationName:
                    return domain, costtime,timeout,gwsname,ssl_orgname
                #尝试发送http请求，获取回应头部的Server字段
                #if domain is None or isgoolgledomain(domain) == 2:
                if True:
                    cur_time = time.time()
                    gwsname = self.getgooglesvrname(c,s,ip)
                    time_end = time.time()
                    costtime += int(time_end * 1000 - cur_time * 1000)
                    if domain is None and len(gwsname) > 0:
                        domain = "null"
                return domain, costtime,timeout,gwsname,ssl_orgname
            else:
                s.settimeout(g_conntimeout)
                c = ssl.wrap_socket(s, cert_reqs=ssl.CERT_REQUIRED, ca_certs=g_cacertfile,
                                    do_handshake_on_connect=False)
                c.settimeout(g_conntimeout)
                c.connect((ip, 443))
                c.settimeout(g_handshaketimeout)
                c.do_handshake()
                time_end = time.time()
                cert = c.getpeercert()
                costtime = int(time_end * 1000 - time_begin * 1000)
                if 'subject' in cert:
                    subjectitems = cert['subject']
                    for mysets in subjectitems:
                        for item in mysets:
                            if item[0] == "commonName":
                                if not isinstance(item[1], str):
                                    domain = item[1].encode("utf-8")
                                else:
                                    domain = item[1]
                                haserror = 0
                            elif item[0] == "organizationName":
                                if not isinstance(item[1], str):
                                    ssl_orgname = item[1].encode("utf-8")
                                else:
                                    ssl_orgname = item[1]
                    if domain is None:
                        PRINT("%s can not get commonName: %s " % (ip, subjectitems))
                # 如果组织不在g_organizationName，可能不是google的IP，不能使用
                if ssl_orgname == "" or ssl_orgname not in g_organizationName:
                    return domain, costtime,timeout,gwsname,ssl_orgname
                #尝试发送http请求，获取回应头部的Server字段
                #if domain is None or isgoolgledomain(domain) == 2:
                if True:
                    cur_time = time.time()
                    gwsname = self.getgooglesvrname(c,s,ip)
                    time_end = time.time()
                    costtime += int(time_end * 1000 - cur_time * 1000)
                    if domain is None and len(gwsname) > 0:
                        domain = "null"
                return domain, costtime,timeout,gwsname,ssl_orgname
        except SSLError as e:
            time_end = time.time()
            costtime = int(time_end * 1000 - time_begin * 1000)
            if str(e).endswith("timed out"):
                timeout = 1
            else:
                PRINT("SSL Exception(%s): %s, times:%d ms " % (ip, e, costtime))
            return domain, costtime,timeout,gwsname,ssl_orgname
        except IOError as e:
            time_end = time.time()
            costtime = int(time_end * 1000 - time_begin * 1000)
            if str(e).endswith("timed out"):
                timeout = 1
            else:
                PRINT("Catch IO Exception(%s): %s, times:%d ms " % (ip, e, costtime))
            return domain, costtime,timeout,gwsname,ssl_orgname
        except Exception as e:
            time_end = time.time()
            costtime = int(time_end * 1000 - time_begin * 1000)
            PRINT("Catch Exception(%s): %s, times:%d ms " % (ip, e, costtime))
            return domain, costtime,timeout,gwsname,ssl_orgname
        finally:
            if g_useOpenSSL:
                if c:
                    if haserror == 0:
                        c.shutdown()
                        c.sock_shutdown(2)
                    c.close()
                if s:
                    s.close()
            else:
                if c:
                    if haserror == 0:
                        c.shutdown(2)
                    c.close()
                elif s:
                    s.close()
                    
    def getgooglesvrname(self,conn,sock,ip):
        try:
            myreq = my_ssl_wrap.httpreq % ip
            conn.write(myreq)
            data=""
            sock.setblocking(0)
            trycnt = 0
            begin = time.time()
            conntimeout = g_conntimeout if g_usegevent == 0 else 0.001
            while True:
                end = time.time()
                costime = int(end-begin)
                if costime >= g_conntimeout:
                    PRINT("get http response timeout(%ss),ip:%s,try:%d" % (costime,ip,trycnt) )
                    return ""
                trycnt += 1
                infds, outfds, errfds = select.select([sock, ], [], [], conntimeout)
                if len(infds) == 0:
                    if g_usegevent == 1:
                        sleep(0.5)
                    continue
                timeout = 0
                try:
                    d = conn.read(1024)
                except SSLError as e:
                    sleep(0.5)
                    continue
                readlen = len(d)
                if readlen == 0:
                    sleep(0.5)
                    continue
                data = data + d.replace("\r","")
                index = data.find("\n\n")
                if index != -1:
                    gwsname = getgooglesvrnamefromheader(data[0:index])
                    return gwsname
                elif readlen <= 64:
                    sleep(0.01)
            return ""
        except Exception as e:
            info = "%s" % e
            if len(info) == 0:
                info = type(e)
            PRINT("Catch Exception(%s) in getgooglesvrname: %s" % (ip, info))
            return ""


class Ping(threading.Thread):
    ncount = 0
    ncount_lock = threading.Lock()
    ipcnt = 0
    __slots__=["checkqueue","cacheResult"]
    def __init__(self,checkqueue,cacheResult):
        threading.Thread.__init__(self)
        self.queue = checkqueue
        self.cacheResult = cacheResult

    def runJob(self):
        while not evt_ipramdomstart.is_set():
            evt_ipramdomstart.wait(5)
        while not self.cacheResult.queryfinish():
            try:
                if self.queue.qsize() == 0 and evt_ipramdomend.is_set():
                    break
                addrint = self.queue.get(True,2)
                ipaddr = to_string(addrint)
                self.queue.task_done()
                self.addIPCount()
                matchblack = False
                for blackitem in g_blackiplist:
                    if ipaddr.startswith(blackitem):
                        matchblack = True
                        break
                if matchblack:
                    PRINT("ip: %s in blacklist,skip it" % (ipaddr))
                    continue
                ssl_obj = my_ssl_wrap()
                (ssldomain, costtime,timeout,gwsname,ssl_orgname) = ssl_obj.getssldomain(self.getName(), ipaddr)
                if ssldomain is not None:
                    gwsip,cnt = self.cacheResult.addOKIP(costtime, ipaddr, ssldomain,gwsname)
                    if cnt != 0:
                        PRINT("ip: %s,CN: %s,O:%s,svr: %s,ok:1,cnt:%d" % (ipaddr, ssldomain,ssl_orgname,gwsname,cnt))
                    elif gwsip:
                        PRINT("ip: %s,CN: %s,O:%s,svr: %s,t:%dms,ok:0" % (ipaddr, ssldomain,ssl_orgname,gwsname,costtime))
                    else:
                        PRINT("ip: %s,CN: %s,O:%s,svr: %s,not gae" % (ipaddr, ssldomain,ssl_orgname,gwsname))
                elif ssldomain is None:
                    self.cacheResult.addFailIP(ipaddr)
            except Empty:
                pass

    def run(self):
        try:
            Ping.ncount_lock.acquire()
            Ping.ncount += 1
            Ping.ncount_lock.release()
            self.runJob()
        except Exception:
            raise
        finally:
            Ping.ncount_lock.acquire()
            Ping.ncount -= 1
            Ping.ncount_lock.release()
    
    @staticmethod 
    def getCount():
        try:
            Ping.ncount_lock.acquire()
            return Ping.ncount
        finally:
            Ping.ncount_lock.release()
    @staticmethod 
    def addIPCount():
        try:
            Ping.ncount_lock.acquire()
            Ping.ipcnt += 1
        finally:
            Ping.ncount_lock.release()    
            
            
class RamdomIP(threading.Thread):
    def __init__(self,checkqueue,cacheResult,cacheip):
        threading.Thread.__init__(self)
        self.ipqueue = checkqueue
        self.cacheResult = cacheResult
        self.hadaddipcnt = 0
        self.cacheip = cacheip
        
    def ramdomip(self):
        iplineslist = []
        skipokcnt = 0
        skiperrocnt = 0
        iplinelist = []
        totalipcnt = 0
        loaddefaultip = False
        if os.path.exists(g_googleipfile):
            try:
                fp = open(g_googleipfile,"r")
                linecnt = 0
                for line in fp:
                    data = line.strip("\r\n")
                    if data == '@default':
                        iplineslist.extend(re.split("\r|\n", ip_str_list.strip("\r\n")))
                        loaddefaultip = True
                    else:
                        iplineslist.append(data)
                        linecnt += 1
                fp.close()
                PRINT("load extra ip ok,line:%d,load default ip: %d" % (linecnt,loaddefaultip))
            except Exception as e:
                PRINT("load extra ip file error:%s " % str(e) )
                sys.exit(1)
        else:
            iplineslist.extend(re.split("\r|\n", ip_str_list.strip("\r\n")))
        for iplines in iplineslist:
            if len(iplines) == 0 or iplines[0] == '#':
                continue
            singlelist = []
            ips = re.split(",|\|", iplines)
            for line in ips:
                if len(line) == 0 or line[0] == '#':
                    continue
                begin, end = splitip(line)
                if checkipvalid(begin) == 0 or checkipvalid(end) == 0:
                    PRINT("ip format is error,line:%s, begin: %s,end: %s" % (line, begin, end))
                    continue
                nbegin = from_string(begin)
                nend = from_string(end)
                iplinelist.append([nbegin,nend])
        
        if g_checklastgoogleipfirst:
            num = 0
            for ip in self.cacheResult.filegwsipset:
                ip_int = from_string(ip)
                self.ipqueue.put(ip_int)
                self.cacheip.add(ip_int)
                num += 1
            if num:
                self.hadaddipcnt += num
                PRINT("load last gae ip cnt: %d" % num)
                evt_ipramdomstart.set()
                
        hadIPData = True
        putdata = False
        while hadIPData:
            if evt_ipramdomend.is_set():
                break
            hadIPData = False
            index = -1
            emptyindexlist=[]
            #PRINT("ramdom ip array: % d" % len(iplinelist))
            for itemlist in iplinelist:
                begin = itemlist[0]
                end = itemlist[1]
                itemlen = end - begin + 1
                index += 1
                if itemlen <= 0:
                    continue
                if self.cacheResult.queryfinish():
                    break
                if itemlen > 1000:
                    selectcnt = 5
                elif itemlen <= 2:
                    selectcnt = itemlen
                else:
                    selectcnt = 2
                for i in xrange(0,selectcnt):
                    k = random.randint(begin,end)
                    first = True
                    findOK = True
                    checkcnt = 0
                    checkend = k
                    # try get next index in circle
                    while k in self.cacheip:
                        checkcnt += 1
                        if k < end:
                            k += 1
                        else:
                            k = begin
                        # if met itself,nee break
                        if k == checkend :
                            findOK = False
                            break
                    #if checkcnt > 1:
                    #    PRINT("[%d]total cnt: %d,index:%d,ramdom checkcnt:%d,found:%d" % (index,itemlen,checkend-begin,checkcnt,findOK))
                    if findOK:
                        hadIPData = True
                        self.ipqueue.put(k)
                        self.cacheip.add(k)
                        self.hadaddipcnt += 1
                        if not putdata:
                            evt_ipramdomstart.set()
                            putdata = True
                    if evt_ipramdomend.is_set():
                        break
                    # not found,no need to ramdom next index
                    if not findOK:
                        emptyindexlist.insert(0,index)
                        break
            if self.ipqueue.qsize() >= 500:
                sleep(1)
            for empytindex in emptyindexlist:
                iplinelist.pop(empytindex)
                #PRINT("remote index: %d" % empytindex )
        if not evt_ipramdomstart.is_set():
            evt_ipramdomstart.set()
        
    def run(self):
        PRINT("begin to get ramdom ip")
        self.ramdomip()
        evt_ipramdomend.set()
        self.cacheip.clear()
        qsize = self.ipqueue.qsize()
        PRINT("ramdom ip thread stopped.had check ip: %d,rest ip queue size: %d" % (self.hadaddipcnt - qsize,qsize))

def from_string(s):
    """Convert dotted IPv4 address to integer."""
    return reduce(lambda a, b: a << 8 | b, map(int, s.split(".")))


def to_string(ip):
    """Convert 32-bit integer to dotted IPv4 address."""
    return ".".join(map(lambda n: str(ip >> n & 0xFF), [24, 16, 8, 0]))


g_ipcheck = re.compile(r'^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$')


def checkipvalid(ip):
    """检查ipv4地址的合法性"""
    ret = g_ipcheck.match(ip)
    if ret is not None:
        "each item range: [0,255]"
        for item in ret.groups():
            if int(item) > 255:
                return 0
        return 1
    else:
        return 0


def splitip(strline):
    """从每组地址中分离出起始IP以及结束IP"""
    begin = ""
    end = ""
    if "-" in strline:
        "xxx.xxx.xxx.xxx-xxx.xxx.xxx.xxx"
        begin, end = strline.split("-")
        if 1 <= len(end) <= 3:
            prefix = begin[0:begin.rfind(".")]
            end = prefix + "." + end
    elif strline.endswith("."):
        "xxx.xxx.xxx."
        begin = strline + "0"
        end = strline + "255"
    elif "/" in strline:
        "xxx.xxx.xxx.xxx/xx"
        (ip, bits) = strline.split("/")
        if checkipvalid(ip) and (0 <= int(bits) <= 32):
            orgip = from_string(ip)
            end_bits = (1 << (32 - int(bits))) - 1
            begin_bits = 0xFFFFFFFF ^ end_bits
            begin = to_string(orgip & begin_bits)
            end = to_string(orgip | end_bits)
    else:
        "xxx.xxx.xxx.xxx"
        begin = strline
        end = strline

    return begin, end


def dumpstacks():
    code = []
    for threadId, stack in sys._current_frames().items():
        code.append("\n# Thread: %d" % (threadId))
        for filename, lineno, name, line in traceback.extract_stack(stack):
            code.append('File: "%s", line %d, in %s' % (filename, lineno, name))
            if line:
                code.append("  %s" % (line.strip()))
    PRINT("\n".join(code))
    
def checksingleprocess(ipqueue,cacheResult,max_threads):
    threadlist = []
    threading.stack_size(96 * 1024)
    PRINT('need create max threads count: %d' % (max_threads))
    for i in xrange(1, max_threads + 1):
        ping_thread = Ping(ipqueue,cacheResult)
        ping_thread.setDaemon(True)
        try:
            ping_thread.start()
        except threading.ThreadError as e:
            PRINT('start new thread except: %s,work thread cnt: %d' % (e, Ping.getCount()))
            break
        threadlist.append(ping_thread)
    try:
        quit = False
        while not quit:
            for p in threadlist:
                if p.is_alive():
                    p.join(5)
                elif Ping.getCount() == 0 or cacheResult.queryfinish():
                    quit = True
                    break
    except KeyboardInterrupt:
        PRINT("try to interrupt process")
        ipqueue.queue.clear()
        evt_ipramdomend.set()
    cacheResult.close()
    

def sort_tmpokfile(nLastOKFileLineCnt):
    if os.path.exists(g_tmpokfile):
        ipdict = dict()
        tmpfile = g_tmpokfile + ".tmp"
        bsortok = False
        needsortip = False
        lastcostime = 0
        ncurline = 0
        with open(g_tmpokfile,"r") as fd:
            for line in fd:
                ncurline += 1
                ips = line.strip("\r\n").split(" ")
                if len(ips) < 3:
                    continue
                ipint = from_string(ips[0])
                # 把当次查询出来的IP放在最前面，因为有一些IP可能上一次的时间少，并且这次又没有查询出来，应该排在新IP后面
                oldIP = True if ncurline <= nLastOKFileLineCnt else False
                if oldIP == True:
                    costime = g_NAtimeout + ncurline
                else:
                    costime = int(ips[1])
                    if lastcostime > costime:
                        needsortip = True 
                lastcostime = costime
                ipdict[ipint] = (costime,ips)
            if needsortip:
                iplist = sorted(ipdict.iteritems(),key = itemgetter(1))
                with open(tmpfile,"w") as wfd:
                    for item in iplist:
                        costime = item[1][0]
                        ips = item[1][1]
                        if costime >= g_NAtimeout and ips[1][0] != 'N':
                            ips[1] = "NA_" + ips[1]
                        wfd.write(" ".join(ips))
                        wfd.write("\n")
                        bsortok = True
        if bsortok:
            shutil.move(tmpfile,g_tmpokfile)
            PRINT("sort %s file ok" % g_tmpokfile)
        else:
            PRINT("file %s no need sort" % g_tmpokfile)


def list_ping():
    if g_useOpenSSL == 1:
        PRINT("support PyOpenSSL")
    if g_usegevent == 1:
        PRINT("support gevent")

    cur_time = time.time()
    checkqueue = Queue()
    cacheResult = TCacheResult()
    lastokresult,lasterrorresult = cacheResult.loadLastResult()
    oklen = len(lastokresult)
    errorlen = len(lasterrorresult)
    totalcachelen = oklen + errorlen
    if totalcachelen != 0:
        PRINT("load last result,ok cnt:%d,ok file line:%d,error cnt: %d" % (oklen,cacheResult.okfilelinecnt,errorlen) )
    
    ramdomip_thread = RamdomIP(checkqueue,cacheResult,lastokresult|lasterrorresult)
    ramdomip_thread.setDaemon(True)
    ramdomip_thread.start()
    checksingleprocess(checkqueue,cacheResult,g_maxthreads)
    
    lastokresult.clear()
    lasterrorresult.clear()
    
    cacheResult.flushFailIP()
    ip_list = cacheResult.getIPResult()
    ip_list.sort()

    PRINT('try to collect ssl result,check ip cnt: %d,times:%ds' % (Ping.ipcnt,time.time()-cur_time) )
    op = 'wb'
    if sys.version_info[0] == 3:
        op = 'w'
    ff = open(g_ipfile, op)
    ncount = 0
    for ip in ip_list:
        domain = ip[2]
        if ip[0] > g_maxhandletimeout :
            break        
        PRINT("[%s] %d ms,domain: %s,svr:%s" % (ip[1], ip[0], domain,ip[3]))
        if domain is not None:
            if ncount != 0:
                ff.write("|")
            ff.write(ip[1])
            ncount += 1
    PRINT("write to file %s ok,count:%d " % (g_ipfile, ncount))
    ff.close()
    nLastOKFileLineCnt = cacheResult.okfilelinecnt
    cacheResult.clearFile()
    if g_needsorttmpokfile:
        sort_tmpokfile(nLastOKFileLineCnt)


def checkip(ip):
    if g_useOpenSSL == 1:
        print "use PyOpenSSL to check ",ip
        sslcontext = OpenSSL.SSL.Context(OpenSSL.SSL.TLSv1_METHOD)
        sslcontext.set_timeout(30)
        s = socket.socket()
        s.connect((ip, 443))
        c = OpenSSL.SSL.Connection(sslcontext, s)
        c.set_connect_state()
        print "%s try to handshake " % ( ip )
        c.do_handshake()
        cert = c.get_peer_certificate()
        print "ssl subject: ",cert.get_subject().get_components()
        c.shutdown()
        s.close()
    elif g_usegevent == 1:
        print "use gevent to check ",ip
        s = socket.socket()
        s.settimeout(10)
        c = ssl.wrap_socket(s, cert_reqs=ssl.CERT_REQUIRED, ca_certs=g_cacertfile)
        c.settimeout(10)
        print( "try connect to %s" % (ip))
        c.connect((ip, 443))
        cert = c.getpeercert()
        if 'subject' in cert:
            print "ssl subject: ",cert['subject']
        else:
            print "ssl key: ",cert
        c.close()

if __name__ == '__main__':
    if len(sys.argv) > 1:
        checkip(sys.argv[1])
    else:
        list_ping()
